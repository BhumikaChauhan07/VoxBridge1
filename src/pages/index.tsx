import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import Pusher from "pusher-js";
import { api } from "~/utils/api";
import { useEffect, useState } from "react";
import channel from "pusher-js/types/src/core/channels/channel";
import axios from "axios";

const Home: NextPage = () => {
  const sender = "user";
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const [chats, setChats] = useState<{ sender: any; message: any }[]>([]);
  const [messageToSend, setMessageToSend] = useState("");
  useEffect(() => {
    const pusher = new Pusher(process.env.NEXT_PUBLIC_KEY as string, {
      cluster: "ap2",
    });
    const channel = pusher.subscribe("chat");

    channel.bind("chat-event", function (data: { sender: any; message: any }) {
      setChats((prevState) => [
        ...prevState,
        { sender: data.sender, message: data.message },
      ]);
    });

    return () => {
      pusher.unsubscribe("chat");
    };
  }, []);

  const handleSubmit = async (e: any) => {
    e.preventDefault();
    await axios.post("/api/pusher", { message: messageToSend, sender });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <p>Hello, {sender}</p>
        <div>
          {chats.map((chat, id) => (
            <>
              <p>{chat.message}</p>
              <small>{chat.sender}</small>
            </>
          ))}
        </div>

        <form
          onSubmit={(e) => {
            handleSubmit(e);
          }}
        >
          <input
            type="text"
            value={messageToSend}
            onChange={(e) => setMessageToSend(e.target.value)}
            placeholder="start typing...."
          />
          <button type="submit">Send</button>
        </form>
      </>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
